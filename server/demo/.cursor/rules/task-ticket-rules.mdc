# Task Ticket 작성 규칙 (Planning Poker용)

## 개요
Planning Poker 세션을 위한 일관된 Task Ticket 작성 가이드입니다. 개발팀이 효율적으로 작업을 추정하고 관리할 수 있도록 도와줍니다.

## 필수 필드 (10개)

### 1. Ticket ID
- **형식**: `PROJ-XXX` (예: PROJ-001, PROJ-002)
- **규칙**: 프로젝트 코드 + 하이픈 + 3자리 숫자, 순차적으로 증가, 중복 불가

### 2. 제목 (Title)
- **길이**: 50자 이내
- **형식**: 동사로 시작하는 명령문
- **예시**: 
  - ✅ "신규 고객 할인 전략 구현"
  - ✅ "장바구니 총액 계산 API 개발"
  - ❌ "프로모션 시스템" (너무 모호)

### 3. 설명 (Description)
- **구조**: 배경, 요구사항, 기술적 세부사항, 참고사항
- **길이**: 200-500자 권장
- **포함사항**: 왜 필요한지, 어떤 기능을 구현해야 하는지, 기술적 제약사항

### 4. Story Points
- **피보나치 수열**: 1, 2, 3, 5, 8, 13, 21
- **기준**:
  - 1점: 30분 이내 (간단한 버그 수정)
  - 2점: 1시간 (간단한 기능 추가)
  - 3점: 반나절 (중간 복잡도 기능)
  - 5점: 하루 (복잡한 기능)
  - 8점: 2-3일 (대규모 기능)
  - 13점: 1주일 (복잡한 시스템)
  - 21점: 2주 이상 (매우 복잡한 작업)

### 5. 작업 유형 (Type)
- **Story**: 사용자 관점의 기능 요구사항
- **Task**: 기술적 구현 작업
- **Bug**: 버그 수정
- **Spike**: 조사/연구 작업

### 6. 우선순위 (Priority)
- **Critical**: 시스템 장애, 보안 이슈
- **High**: 중요한 기능, 마일스톤 관련
- **Medium**: 일반적인 기능 개발
- **Low**: 개선사항, 부가 기능

### 7. 담당자 (Assignee)
- **형식**: 실명 또는 GitHub 사용자명
- **규칙**: 한 명만 지정, 팀원 간 공유 가능

### 8. 컴포넌트 (Component)
- **Backend**: 서버 로직, API, 비즈니스 로직
- **Frontend**: UI/UX, 클라이언트 코드
- **Database**: 스키마, 마이그레이션, 쿼리
- **Testing**: 테스트 코드, 테스트 환경

### 9. Acceptance Criteria
- **형식**: 체크리스트 형태
- **구조**: `- [ ] 조건 1`, `- [ ] 조건 2`
- **규칙**: 측정 가능하고 명확한 조건, 완료 여부를 객관적으로 판단 가능

### 10. 의존성 (Dependencies)
- **형식**: `PROJ-XXX, PROJ-YYY` (쉼표로 구분)
- **규칙**: 선행 작업이 완료되어야 시작 가능한 작업, 블로킹 이슈 명시

## Story Points 추정 가이드

### 복잡도 평가 기준
- **기술적 복잡도**: 새로운 기술 사용, 복잡한 알고리즘
- **비즈니스 복잡도**: 복잡한 비즈니스 로직, 다양한 예외 상황
- **통합 복잡도**: 여러 시스템 간 연동, 외부 API 연동
- **테스트 복잡도**: 테스트 케이스 수, 테스트 환경 구성

### 불확실성 요소
- **미지의 기술**: 처음 사용하는 기술이나 라이브러리
- **명확하지 않은 요구사항**: 기획이 불완전한 경우
- **외부 의존성**: 외부 시스템이나 API 의존
- **성능 요구사항**: 특별한 성능 요구사항

## Planning Poker 세션 가이드

### 세션 준비
- **참석자**: 개발팀 전체 (5-8명 권장)
- **시간**: 1-2시간
- **준비물**: Task Ticket 목록, Planning Poker 카드

### 세션 진행 순서
1. **Ticket 설명** (5분): 작성자가 Ticket 내용 설명
2. **질문 및 답변** (5분): 팀원들의 질문과 답변
3. **개별 추정** (2분): 각자 Story Points 추정
4. **카드 공개** (1분): 모든 카드 동시 공개
5. **토론** (5분): 추정값이 다른 경우 토론
6. **재추정** (2분): 필요시 재추정
7. **최종 결정** (1분): 합의된 Story Points 결정

## Ticket 템플릿

```
**Ticket ID**: PROJ-XXX
**제목**: [작업 제목]
**설명**: 
## 배경
[왜 이 작업이 필요한가?]

## 요구사항
[구체적인 요구사항]

## 기술적 세부사항
[구현 방법이나 기술적 고려사항]

**Story Points**: [1,2,3,5,8,13,21]
**작업 유형**: [Story/Task/Bug/Spike]
**우선순위**: [Critical/High/Medium/Low]
**담당자**: [개발자명]
**컴포넌트**: [Backend/Frontend/Database/Testing]
**Acceptance Criteria**:
- [ ] [완료 조건 1]
- [ ] [완료 조건 2]
- [ ] [완료 조건 3]
**의존성**: [PROJ-XXX, PROJ-YYY]
```

## 품질 관리

### Ticket 품질 기준
- **명확성**: 요구사항이 명확하고 모호하지 않음
- **완전성**: 필요한 정보가 모두 포함됨
- **측정가능성**: 완료 여부를 객관적으로 판단 가능
- **추정가능성**: Story Points 추정이 가능한 수준

### 리뷰 프로세스
1. **작성자 자체 검토**: 체크리스트 확인
2. **팀 리더 검토**: 품질 기준 확인
3. **Planning Poker 세션**: 팀 전체 검토 및 추정
4. **필요시 수정**: 피드백 반영하여 수정

## 예시

### Story 예시
```
Ticket ID: PROJ-001
제목: 신규 고객 할인 전략 구현
설명: 
## 배경
신규 고객 유치를 위한 첫 구매 할인 정책을 시스템에 구현해야 합니다.

## 요구사항
- 신규 고객이 10만원 이상 구매 시 15,000원 할인
- 다른 할인과 중복 적용 불가
- 우선순위 최상위

## 기술적 세부사항
- NewCustomerStrategy 클래스 구현
- PromotionChain에 통합
- 단위테스트 작성

Story Points: 5
작업 유형: Story
우선순위: High
담당자: 김개발
컴포넌트: Backend
Acceptance Criteria:
- [ ] 신규 고객 할인 로직이 정상 동작
- [ ] 다른 할인과 중복 적용되지 않음
- [ ] 단위테스트 통과
- [ ] 코드 리뷰 완료
의존성: 없음
```

### Task 예시
```
Ticket ID: PROJ-002
제목: 프로모션 전략 데이터베이스 스키마 설계
설명:
## 배경
프로모션 전략을 저장하고 관리하기 위한 데이터베이스 스키마가 필요합니다.

## 요구사항
- 프로모션 전략 정보 저장
- 조건과 액션 분리 저장
- 적용 이력 추적

## 기술적 세부사항
- promotion_strategies 테이블
- promotion_conditions 테이블
- promotion_actions 테이블
- 마이그레이션 스크립트

Story Points: 8
작업 유형: Task
우선순위: High
담당자: 이데이터
컴포넌트: Database
Acceptance Criteria:
- [ ] 데이터베이스 스키마 설계 완료
- [ ] 마이그레이션 스크립트 작성
- [ ] 샘플 데이터 삽입
- [ ] 스키마 검증 완료
의존성: 없음
```

## 체크리스트

### 작성 전 확인사항
- [ ] 요구사항이 명확한가?
- [ ] 기술적 제약사항을 파악했는가?
- [ ] 관련 문서나 참고자료가 있는가?
- [ ] 의존성이 있는 다른 작업이 있는가?

### 작성 후 검토사항
- [ ] 제목이 작업 내용을 명확히 표현하는가?
- [ ] 설명이 충분히 상세한가?
- [ ] Acceptance Criteria가 측정 가능한가?
- [ ] Story Points가 적절한가?
- [ ] 담당자와 컴포넌트가 올바른가?