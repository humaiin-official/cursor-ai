---
description: 시스템 디자인 문서 작성 가이드 및 베스트 프랙티스
---

# 시스템 디자인 문서 작성 가이드

## 문서 구조 및 구성 요소

### 1. 문서 개요 섹션
```markdown
## 📋 문서 개요
**프로젝트명**: [프로젝트 이름]
**설계 패턴**: [사용할 디자인 패턴]
**문서 버전**: [버전 번호]
**작성일**: [작성 날짜]
```

### 2. 시스템 아키텍처 개요
- **핵심 설계 원칙**: SOLID 원칙, 확장성, 유지보수성
- **아키텍처 다이어그램**: ASCII 또는 Mermaid 다이어그램
- **클래스 다이어그램**: Mermaid를 사용한 상세한 클래스 구조
- **클래스별 책임과 역할**: 각 클래스의 핵심 책임을 한 줄로 요약

### 3. 핵심 컴포넌트 설계
- **인터페이스 정의**: 공통 인터페이스와 메서드 시그니처
- **데이터 클래스**: 핵심 데이터 구조 정의
- **핵심 로직**: 주요 비즈니스 로직 구현 방법

### 4. 구체적인 구현 예시
- **전략 패턴 구현**: 각 전략의 구체적인 구현 코드
- **체인 오브 리스폰시빌리티**: 순차 처리 로직
- **팩토리 패턴**: 객체 생성 및 조합 로직

### 5. 데이터 모델 설계
- **ERD (Entity Relationship Diagram)**: Mermaid를 사용한 데이터베이스 관계도
- **상세 테이블 스키마**: SQL DDL 문
- **기본 데이터 삽입**: 초기 데이터 설정

## Mermaid 다이어그램 작성 가이드

### 클래스 다이어그램
```mermaid
classDiagram
    %% 인터페이스 정의
    class InterfaceName {
        <<interface>>
        +method1() ReturnType
        +method2() ReturnType
    }
    
    %% 구현체들
    class ImplementationClass {
        -privateField: Type
        +publicMethod() ReturnType
        +getPriority() Int
    }
    
    %% 관계 정의
    InterfaceName <|.. ImplementationClass : implements
    ServiceClass --> InterfaceName : uses
```

### ERD 다이어그램
```mermaid
erDiagram
    TABLE_NAME {
        bigint id PK
        varchar name
        decimal amount
        boolean is_active
        timestamp created_at
    }
    
    %% 관계 정의
    TABLE1 ||--o{ TABLE2 : "relationship_name"
```

## 문서 작성 베스트 프랙티스

### 1. 시각적 표현
- **다이어그램 우선**: 복잡한 구조는 다이어그램으로 먼저 설명
- **코드 예시**: 실제 구현 가능한 코드 예시 제공
- **단계별 설명**: 구현 과정을 단계별로 나누어 설명

### 2. 개발자 친화적 구성
- **구현 체크리스트**: 단계별 구현 가이드 제공
- **테스트 전략**: 단위/통합 테스트 예시
- **성능 고려사항**: 캐싱, 비동기 처리 등 성능 최적화 방안

### 3. 확장성 고려
- **향후 확장 계획**: 시스템 진화 방향 제시
- **마이그레이션 전략**: 기존 시스템과의 호환성 고려
- **모니터링 및 로깅**: 운영 관리를 위한 가이드

## 프로모션 시스템 사례 분석

### 설계 패턴 선택 기준
1. **Strategy Pattern + Chain of Responsibility**: 복잡한 비즈니스 규칙 처리
2. **Rule Engine 확장**: 향후 동적 정책 변경 지원
3. **Event-Driven 아키텍처**: 마이크로서비스 확장 고려

### 데이터 모델 설계 원칙
- **기존 시스템 호환성**: 기존 테이블과의 연동 고려
- **확장성**: JSON 필드를 활용한 유연한 설정 저장
- **성능 최적화**: 자주 사용되는 쿼리 패턴에 맞춘 인덱스 설계

### 문서 구성 예시
```markdown
## 1. 시스템 아키텍처 개요
### 1.1 핵심 설계 원칙
### 1.2 아키텍처 다이어그램
### 1.3 클래스 다이어그램
### 1.4 클래스별 책임과 역할

## 2. 핵심 컴포넌트 설계
## 3. 구체적인 구현 예시
## 4. 서비스 레이어 통합
## 5. 데이터 모델 설계
## 6. 테스트 전략
## 7. 성능 고려사항
## 8. 모니터링 및 로깅
## 9. 향후 확장 계획
## 10. 구현 체크리스트
```

## 문서 품질 체크리스트

### 필수 요소
- [ ] 명확한 문제 정의 및 해결 방안
- [ ] 시각적 다이어그램 (아키텍처, 클래스, ERD)
- [ ] 구체적인 코드 예시
- [ ] 구현 가능한 설계 방안
- [ ] 테스트 전략 및 성능 고려사항

### 선택 요소
- [ ] 운영/관리 가이드
- [ ] 보안 고려사항
- [ ] 모니터링 및 알림 체계
- [ ] 장애 대응 방안
- [ ] 문서 버전 관리 전략